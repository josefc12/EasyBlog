@using EasyBlog.Client.Refit
@using EasyBlog.Client.Components
@using EasyBlog.Client.Services
@inherits LayoutComponentBase

@inject DialogService DialogService
@inject IEasyBlogApi EasyBlogApi
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@inject LoginStateService LoginStateService

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent=JustifyContent.SpaceBetween Gap="0">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"  Gap="16">
                <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                <RadzenLabel Text="Easy Blog" />
            </RadzenStack>
            <RadzenStack class="rz-pr-4" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent=JustifyContent.End Gap="4">
                @if (LoginStateService.IsLoggedIn == false)
                {
                    <RadzenButton Click=@Register Icon="account_circle" Text="Register" ButtonStyle="ButtonStyle.Secondary"/>
                    <RadzenButton Click=@Login Icon="account_circle" Text="Login" ButtonStyle="ButtonStyle.Secondary"/>
                }
                else
                {
                    <RadzenButton Click=@Logout Icon="exit_to_app" Text="Log out" ButtonStyle="ButtonStyle.Secondary"/>
                }

            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <Navigation />
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenDialog />
    <RadzenFooter>
        Copyright josec12
    </RadzenFooter>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        // Check login status on initialization
        LoginStateService.OnChange += StateHasChanged;
        LoginStateService.IsLoggedIn = false;
    }
    
    private async Task Register()
    {
        var result = await DialogService.OpenAsync("Register", ds =>
            @<LoginRegisterDialog LogicType="Register" OnLoginStatusChanged="HandleLoginStatusChanged"/>);
    }
    private async Task Login()
    {
        var result = await DialogService.OpenAsync("Login", ds =>
            @<LoginRegisterDialog LogicType="Login" OnLoginStatusChanged="HandleLoginStatusChanged"/>);
            
    }
    private void HandleLoginStatusChanged(bool status)
    {
        isLoggedIn = status; // Update isLoggedIn based on the status received from the dialog
        StateHasChanged();  // Trigger re-render to reflect the new login status
    }

    private async Task Logout()
    {
        await LocalStorage.SetItemAsync("authToken", "");
        LoginStateService.IsLoggedIn = false;
        //isLoggedIn = await GetLoginStatus();
        await InvokeAsync(StateHasChanged);
    }

    /*
    private async Task<bool> GetLoginStatus()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            return true;
        }
        return false;
    }
    */

    public void Dispose()
    {
        LoginStateService.OnChange -= StateHasChanged;
    }

}
